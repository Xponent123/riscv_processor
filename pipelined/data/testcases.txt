initial value of register
x1 = 5
x2 = 10
x3 = 12
x4 = 9
initial value of memory 
mem[32] = 45
mem[12] = 13


add x5, x1, x2 // x5 = 5 + 10 = 15
sub x6, x2, x0 // x6 = 10 - 0 = 10
and x7, x3, x4 // x7 = 12 & 9 = 8
or x8, x3, x4 // x8 = 12 | 9 = 13
ld x9, 27(x1) // x9 = mem[27 + 5] = 45
sd x3, 12(x1) // mem[12 + 5] = mem[17] = x3 = 12
sub x10, x3, x4 // x10 = 12 - 9 = 3
add x11, x10, x4 // x11 = 3 + 9 = 12 ****DATA HAZARD****
sub x11, x1, x10 // x11 = 5 - 3 = 2 ****DATA HAZARD****
add x12, x11, x0 // x12 = 2 + 0 = 2 ****DOUBLE DATA HAZARD****
ld x13, 0(x3) // x13 = mem[0 + 12] = mem[12] = 13
add x14, x13, x0 // x14 = 13 + 0 = 13 ****LOAD USE DATA HAZARD - ONE STALL****
beq x2, x6, 10 // x2 == x6 == 10 --> PC = PC + 10 ****BRANCH HAZARD****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x15, x2, x3 // x15 = 10 + 12 = 22 ****SHOULD NOT HAPPEN****
add x16, x3, x4 // x16 = 12 + 9 = 21 ****PC SHOULD RESUME HERE****
beq x13, x15, 10 // x13(13) != x15(0) ****BRANCH NOT TAKEN****
add x17, x13, x14 // x17 = 13 + 13 = 26
add x0, x13, x14 // x0 = 0
sub x13, x13, x14 // x13 = 13 - 13 = 0
 

output 
x5 = 15
x6 = 10
x7 = 8
x8 = 13
x9 = 45
mem[17] = 12
x10 = 3
x11 = 2
x12 = 2
x13 = 13
x14 = 13
x15 = 0
x16 = 21
x17 = 26
x0 = 0
x13 = 0

